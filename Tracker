import SwiftUI

struct ContentView: View {
    // State Properties
    @State private var activity: String = "Driving"
    @State private var distance: String = ""
    @State private var showTips = false
    @State private var emissionsLog: [String] = []
    
    // Computed Properties
    private var co2Emissions: Double? {
        guard let distanceValue = Double(distance),
              let emissionFactor = emissionFactors[activity] else { return nil }
        return distanceValue * emissionFactor
    }
    
    private var emissionsText: String {
        if let emissions = co2Emissions {
            return String(format: "Total CO2 Emissions: %.2f kg", emissions)
        } else {
            return "Invalid input. Please enter a valid distance."
        }
    }
    
    // Emission factors (in kg CO2 per activity)
    let emissionFactors: [String: Double] = [
        "Driving": 0.404, // kg CO2 per mile
        "Flying": 0.257, // kg CO2 per mile
        "Biking": 0.0,    // kg CO2 per mile
        "Walking": 0.0    // kg CO2 per mile
    ]
    
    let tips: [String: String] = [
        "Driving": "1. Carpool with others.\n2. Maintain your vehicle for better fuel efficiency.",
        "Flying": "1. Consider direct flights.\n2. Use alternative transport for short distances.",
        "Biking": "1. Use biking for short trips.\n2. Encourage others to bike.",
        "Walking": "1. Walk for errands instead of driving.\n2. Promote walking in your community."
    ]
    
    let activities = ["Driving", "Flying", "Biking", "Walking"]
    
    var body: some View {
        ScrollView {
            VStack {
                // Activity Picker
                Picker("Select activity", selection: $activity) {
                    ForEach(activities, id: \.self) { activity in
                        Text(activity).tag(activity)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                // Distance Input
                TextField("Enter distance (miles)", text: $distance)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                    .keyboardType(.decimalPad)
                    .onChange(of: distance) { _ in
                        // Optional: Add validation feedback for live input changes
                    }
                
                // Calculate Button
                Button(action: calculateEmissions) {
                    Text("Calculate Emissions")
                        .padding()
                        .background(isInputValid ? Color.accentColor : Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(5)
                }
                .disabled(!isInputValid)
                
                // Emissions Result
                Text(emissionsText)
                    .padding()
                    .foregroundColor(isInputValid ? .primary : .red)
                    .font(.headline)
                
                // Tips Button
                Button(action: {
                    showTips.toggle()
                }) {
                    Text("How to Spend Less Emissions")
                        .font(.headline)
                        .padding()
                        .background(Color.accentColor)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .alert(isPresented: $showTips) {
                    Alert(title: Text("Tips to Reduce CO2 Emissions"),
                          message: Text(tips[activity] ?? "No tips available."),
                          dismissButton: .default(Text("Got it!")))
                }
                
                // Emissions Log
                if !emissionsLog.isEmpty {
                    Text("Emissions Log")
                        .font(.title2)
                        .padding(.top)
                    List(emissionsLog, id: \.self) { log in
                        Text(log)
                    }
                    .frame(height: 200) // Adjust height for better UI
                }
            }
            .padding()
        }
    }
    
    private var isInputValid: Bool {
        Double(distance) = nil
    }
    
   func calculateEmissions() {
    guard let emissions = co2Emissions else {
        return
    emissionsLog.append("\(activity) for \(distance) miles: \(String(format: "%.2f", emissions)) kg CO2")

    }
}

@main
struct ViraGreenApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
